#!usr/bin/env python

from __future__ import print_function
import os
import numpy as np

import chainer
import chainer.functions as F
import chainer.links as L
from chainer import cuda
from chainer.datasets import get_mnist
from chainer.training import trainer, extension
from chainer.dataset import convert
from chainer.dataset import iterator as iterator_module
from chainer import optimizer as optimizer_module

import net

def pt_regularizaer(data):
    """
    Args:
        data (chainer.Variable): generated by Generator(Chain).
    Returns:
        pt (chainer.Variable): Pull-Away regularizer
    """
    batch_size = data.shape[0]
    flattened_data = F.flatten(data)
    nominator = F.matmul(flattened_data, flattened_data.T)
    denomitor = F.sum(flattened_data*flattened_data, axis=1)
    pt = nominator / denomitor
    pt *= pt
    pt = F.sum(pt) / (batch_size * (batch_size - 1))
    return pt

class EBGAN_Updater(chainer.training.StandardUpdater):

    def __init__(self, iterator, generator, discriminator, optimizers, converter=convert.concat_examples, device=None):
        if isinstance(iterator, iterator_module.Iterator):
            iterator = {'main':iterator}

        self._iterators = iterator
        self._optimizers = optimizers

        self.gen = generator
        self.dis = discriminator

        self.converter = converter
        self.iteration = 0
        self.device = device

    def updater_core(self, x):
        batch = self._iterators['main'].next()
        in_arrays = self.converter(batch, self.device)

        
